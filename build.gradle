apply plugin: 'java'
apply plugin: 'application'


repositories {
    jcenter()
}

mainClassName = "SampleAxisProject"

ext {
    generatedDir = "${buildDir}/generated"
    externalWsvcURL = "http://www.webservicex.com/globalweather.asmx?wsdl"
    aarFileName = "WeatherService"
    serverSidePackage = "net.weather.webservice"
    serverSideDir = serverSidePackage.replaceAll("\\.", "/")
}

dependencies {
    compile "org.apache.axis2:axis2:$axisVersion"
    compile "org.apache.axis2:axis2-java2wsdl:$axisVersion"
}

sourceSets {
    // Define a new source set for generated client and server code.
    generated {
        java {
            compileClasspath = sourceSets.main.compileClasspath
            srcDirs = ["${generatedDir}/src"]
            resources {
                srcDir "${generatedDir}/resources"
            }
        }
    }

    // Add the source set source directories source directories for main.
    main {
        java {
            srcDirs += sourceSets.generated.java.srcDirs
        }
    }
}

/**
 * Create the directory used to hold generated content.
 */
task createGeneratedDirectory(description: "Creates a directory for generated content") << {
    File generatedDirectory = new File("${generatedDir}");
    if (!generatedDirectory.exists()) {
        generatedDirectory.mkdirs();
    }
}

/**
 * Generate server-side code that can be used to run a representation of the specified web service on an Axis-enabled
 * servlet container.
 */
task generateServerSideCode(type: JavaExec,
        description: 'Generates Java code from an external WSDL.',
        group: 'build',
        dependsOn: 'createGeneratedDirectory') {
    main = 'org.apache.axis2.wsdl.WSDL2Java'
    args "-uri", externalWsvcURL,
            "-p", serverSidePackage,
            "-d", "adb",
            "-o", generatedDir,
            "-uw", "-or", "-s", "-sd", "-ss", "-ssi"
    maxHeapSize = '100M'
    classpath = sourceSets.main.compileClasspath
}

generateServerSideCode.doLast {
    // remove default server skeleton class and replace with a basic implementation
    File dir = new File("${generatedDir}/src/${serverSideDir}/");
    File skeletonFile = new File(dir.path + '/' + 'GlobalWeatherSkeleton.java');
    skeletonFile.delete();
    File replacementFile = new File("${projectDir}/src/replacement/${serverSideDir}/GlobalWeatherSkeleton.java");
    copy {
        from(replacementFile.path)
        into(dir.path)
    }
}

/**
 * Generate client-side code that can be used to invoke the web service.
 */
task generateClientSideCode(type: JavaExec,
        description: 'Generates Java code from an external WSDL.',
        group: 'build',
        dependsOn: 'createGeneratedDirectory') {
    main = 'org.apache.axis2.wsdl.WSDL2Java'
    args "-uri", externalWsvcURL,
            "-p", "sample.client",
            "-d", "adb",
            "-o", generatedDir,
            "-uw", "-or", "-s"
    maxHeapSize = '100M'
    classpath = sourceSets.main.compileClasspath
}

compileJava.dependsOn('generateClientSideCode', 'generateServerSideCode')

/**
 * Generate an Apache Axis archive file for the external service.
 * This can be useful if you wish to test operations on the external service against a local instance of it.
 */
task generateServiceAARFile(type: Jar,
        group: 'build',
        dependsOn: 'compileJava') {
    baseName = aarFileName
    extension = "aar"

    from(sourceSets.generated.output) {
        exclude("**/sample")
        exclude("*.xml")
        exclude("*.wsdl")
    }
    from(sourceSets.generated.resources) {
        into('META-INF')
    }
}