apply plugin: 'java'
apply plugin: 'application'


repositories {
    jcenter()
}

mainClassName = "SampleAxisProject"

ext {
    generatedDir = "${buildDir}/generated"
}

dependencies {
    compile "org.apache.axis2:axis2:$axisVersion"
    compile "org.apache.axis2:axis2-java2wsdl:$axisVersion"
}

sourceSets {
    // Define a new source set for generated client and server code.
    generated {
        java {
            compileClasspath = sourceSets.main.compileClasspath
            srcDirs = ["${generatedDir}/src"]
            resources {
                srcDir "${generatedDir}/resources"
            }
            output.resourcesDir = 'META-INF'
        }
    }

    // Add the source set source directories source directories for main.
    main {
        java {
            srcDirs += sourceSets.generated.java.srcDirs
        }
    }
}

/**
 * Create the directory used to hold generated content.
 */
task createGeneratedDirectory(description: "Creates a directory for generated content") << {
    File generatedDirectory = new File("${generatedDir}");
    if (!generatedDirectory.exists()) {
        generatedDirectory.mkdirs();
    }
}

/**
 * Generate client code stubs that can be used to invoke operations on the Axis webservice.
 */
task generateWebServiceCode(type: JavaExec,
        description: 'Generates Java code from an external WSDL.',
        group: 'build',
        dependsOn: 'createGeneratedDirectory') {
    main = 'org.apache.axis2.wsdl.WSDL2Java'
    args "--noBuildXML", "-uri", "http://www.webservicex.com/globalweather.asmx?wsdl", "-p",
            "sample.webservice", "-d", "adb", "-uw", "-o", "${generatedDir}",
            "-or", "-s", "-ss", "-sd", "-ssi"
    maxHeapSize = '100M'
    classpath = sourceSets.main.compileClasspath
}

/**
 * Generate an Apache Axis archive file for the external service.
 * This can be useful if you wish to test operations on the external service against a local instance of it.
 */
task generateServiceAARFile(type: Jar,
        group: 'build',
        dependsOn: 'generateWebServiceCode') {
    baseName = "WeatherService"
    extension = "aar"

    from(sourceSets.generated.output) {
        include("**/*.class")
    }
    from(sourceSets.generated.resources) {
        into('META-INF')
    }
}

compileJava.dependsOn('generateWebServiceCode')