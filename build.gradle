apply plugin: 'java'
apply plugin: 'application'


repositories {
    jcenter()
}

mainClassName = "SampleAxisProject"

ext {
    webServiceClass = "sample.webservice.server.StockService"
    generatedDir = "${buildDir}/generated"
}

dependencies {
    compile "org.apache.axis2:axis2:$axisVersion"
    compile "org.apache.axis2:axis2-java2wsdl:$axisVersion"
    compile "org.apache.axis2:axis2-jibx:$axisVersion"
}

sourceSets {
    // Define a new source set for generated client-side code.
    generated {
        java {
            srcDirs = ["${generatedDir}/src"]
        }
    }

    // Add the source set source directories source directories for main.
    main {
        java {
            srcDirs += sourceSets.generated.java.srcDirs
        }
    }
}

/**
 * Compiles the web service class found in 'sample.webservice.server'.
 */
task compileWebService(type: JavaCompile,
        description: "Compiles the WebService Java Class",
        group: 'build') {
    classpath = sourceSets.main.compileClasspath
    File classDir = new File("${buildDir}/classes/main");
    if (!classDir.exists()) {
        classDir.mkdirs()
    }
    destinationDir = file('build/classes/main')
    String serviceFile = "${projectDir}/src/main/java/" + "${webServiceClass}".replaceAll("\\.", "/") + ".java";
    source = serviceFile
}

/**
 * Create the directory used to hold generated content.
 */
task createGeneratedDirectory(description: "Creates a directory for generated content") << {
    File generatedDirectory = new File("${generatedDir}");
    if (!generatedDirectory.exists()) {
        generatedDirectory.mkdirs();
    }
}

/**
 * Generates a WSDL definition for the Axis web service generated by the 'compileWebService' task.
 */
task generateWSDL(type: JavaExec,
        description: 'Generates WSDL for the sample Axis webservice',
        group: 'build',
        dependsOn: ['compileWebService', 'createGeneratedDirectory']) {
    main = 'org.apache.ws.java2wsdl.Java2WSDL'
    args "-o", "$generatedDir", "-cn", "${webServiceClass}", "-of", "StockService.wsdl"
    maxHeapSize = '100M'
    classpath = sourceSets.main.compileClasspath + files("${buildDir}/classes/main")
}

/**
 * Generate client code stubs that can be used to invoke operations on the Axis webservice.
 */
task generateClientCode(type: JavaExec,
        description: 'Generates Java code that can be used as a client of the Axis service.',
        group: 'build',
        dependsOn: 'generateWSDL') {
    main = 'org.apache.axis2.wsdl.WSDL2Java'
    args "-uri", "${generatedDir}/StockService.wsdl", "-p", "sample.webservice.client", "-d", "jibx", "-s",
            "-uw", "-o", "${generatedDir}", "-or"
    maxHeapSize = '100M'
    classpath = sourceSets.main.compileClasspath
}

compileJava.dependsOn('generateClientCode')

/**
 * Generates an Axis archive, which can be deployed on an Axis-enabled servlet container.
 * The archive consists of the "services.xml" service descriptor, and any webservice classes found in the
 * "sample.webservices.server" package.
 */
task generateAAR(type: Jar) {
    baseName = "StockService"
    extension = ".aar"
    from sourceSets.main.output
    include('**/sample/webservice/server/*')
    include('**/services.xml')
}
